configfile: "config/config.yaml"
DATADIR = config["datadir"]
RESULTSDIR = config["resultsdir"]
LOGSDIR = config["logsdir"]

rule all:
    input:
        RESULTSDIR + "out.html"

rule bwa_map:
    input:
        DATADIR + "genome.fa",
        DATADIR + "samples/{sample}.fastq"
    output:
        RESULTSDIR + "mapped_reads/{sample}.bam"
    message:
        "executing `bwa mem | samtools view` on '{input}' to generate '{output}'"
    log:
        LOGSDIR + "bwa_map/{sample}.log"
    shell:
        """
        (
        bwa mem {input} | samtools view -Sb - > {output}
        ) >> {log} 2>&1
        """

rule samtools_sort:
    input:
        RESULTSDIR + "mapped_reads/{sample}.bam"
    output:
        RESULTSDIR + "sorted_reads/{sample}.bam"
    message:
        "executing `samtools sort` on '{input}' to generate '{output}'"
    log:
        LOGSDIR + "samtools_sort/{sample}.log"
    shell:
        """
        (
        samtools sort -T results/sorted_reads/{wildcards.sample} -O bam {input} > {output}
        ) >> {log} 2>&1
        """

rule samtools_index:
    input:
        RESULTSDIR + "sorted_reads/{sample}.bam"
    output:
        RESULTSDIR + "sorted_reads/{sample}.bam.bai"
    message:
        "executing `samtools index` on '{input}' to generate '{output}'"
    log:
        LOGSDIR + "samtools_index/{sample}.log"
    shell:
        """
        (
        samtools index {input}
        ) >> {log} 2>&1
        """

rule bcftools_call:
    input:
        fa=DATADIR + "genome.fa",
        bam=expand(RESULTSDIR + "sorted_reads/{sample}.bam", sample=config["samples"]),
        bai=expand(RESULTSDIR + "sorted_reads/{sample}.bam.bai", sample=config["samples"])
    output:
        RESULTSDIR + "calls/all.vcf"
    message:
        "executing `samtools mpileup | bcftools call` on '{input}' to generate '{output}'"
    log:
        LOGSDIR + "bcftools_call.log"
    shell:
        """
        (
        samtools mpileup -g -f {input.fa} {input.bam} | 
        bcftools call -mv - > {output}
        ) >> {log} 2>&1
        """

rule report:
    input:
        RESULTSDIR + "calls/all.vcf"
    output:
        RESULTSDIR + "out.html"
    message:
        "Generating report '{output}' from '{input}'"
    run:
        from snakemake.utils import report

        with open(input[0]) as f:
            n_calls = sum(1 for line in f if not line.startswith("#"))

        report("""
        An example workflow
        ===================================

        Reads were mapped to the Yeast reference genome 
        and variants were called jointly with
        SAMtools/BCFtools.

        This resulted in {n_calls} variants (see Table T1_).
        """, output[0], metadata="Author: Mr Pipeline", T1=input[0])
